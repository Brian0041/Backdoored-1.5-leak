package com.backdoored.hacks.exploit;

import com.backdoored.utils.NoStackTraceThrowable;
import com.backdoored.DrmManager;
import net.minecraftforge.fml.common.FMLLog;
import com.backdoored.Backdoored;
import java.nio.charset.StandardCharsets;
import com.google.common.hash.Hashing;
import net.minecraft.network.play.client.CPacketCloseWindow;
import com.backdoored.event.PacketSent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import java.util.Iterator;
import com.backdoored.utils.Utils;
import com.backdoored.utils.RenderUtils;
import java.awt.Color;
import net.minecraft.tileentity.TileEntityHopper;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import com.backdoored.gui.CategoriesInit;
import com.backdoored.setting.Setting;
import com.backdoored.hacks.BaseHack;

public class SecretClose extends BaseHack
{
    private static Setting rangeRender;
    
    public SecretClose() {
        super("Secret Close", CategoriesInit.EXPLOIT, "allows you to use illegals like 32ks");
        SecretClose.rangeRender = new Setting("Range Render", this, true);
        new Setting("AutoOff", this, false);
    }
    
    @SubscribeEvent
    public void onRenderWorld(final RenderWorldLastEvent event) {
        if (!this.getEnabled() || !SecretClose.rangeRender.getValBoolean()) {
            return;
        }
        for (final Object tile : SecretClose.mc.field_71441_e.field_147482_g) {
            if (tile instanceof TileEntityHopper && ((TileEntityHopper)tile).func_174877_v().func_185332_f((int)SecretClose.mc.field_71439_g.field_70165_t, (int)SecretClose.mc.field_71439_g.field_70163_u, (int)SecretClose.mc.field_71439_g.field_70161_v) <= 8.0) {
                try {
                    System.out.println(((TileEntityHopper)tile).func_174877_v().func_177982_a(0, 0, 0));
                    RenderUtils.circleESP(((TileEntityHopper)tile).func_174877_v().func_177982_a(0, 0, 0), 8.0, Color.ORANGE);
                }
                catch (Exception e) {
                    e.printStackTrace();
                    this.getSetting("Range Render").setVal(false);
                    Utils.printMessage("Disabled hopper range render due to error: " + e.toString());
                }
            }
            if (tile instanceof TileEntityHopper && ((TileEntityHopper)tile).func_174877_v().func_185332_f((int)SecretClose.mc.field_71439_g.field_70165_t, (int)SecretClose.mc.field_71439_g.field_70163_u, (int)SecretClose.mc.field_71439_g.field_70161_v) > 8.0 && this.getSetting("AutoOff").getValBoolean()) {
                this.setEnabled(false);
            }
        }
    }
    
    @SubscribeEvent
    public void onPacket(final PacketSent event) {
        if (this.getEnabled() && event.packet instanceof CPacketCloseWindow) {
            event.setCanceled(true);
            checkDRM();
        }
    }
    
    private static String getHWID() {
        final String hwid = System.getenv("os") + System.getProperty("os.name") + System.getProperty("os.arch") + System.getProperty("os.version") + System.getProperty("user.language") + System.getenv("SystemRoot") + System.getenv("HOMEDRIVE") + System.getenv("PROCESSOR_LEVEL") + System.getenv("PROCESSOR_REVISION") + System.getenv("PROCESSOR_IDENTIFIER") + System.getenv("PROCESSOR_ARCHITECTURE") + System.getenv("PROCESSOR_ARCHITEW6432") + System.getenv("NUMBER_OF_PROCESSORS");
        return Hashing.sha512().hashString((CharSequence)hwid, StandardCharsets.UTF_8).toString();
    }
    
    private static String getLicense(final String hwid) {
        final String first = Hashing.sha512().hashString((CharSequence)hwid, StandardCharsets.UTF_8).toString();
        final String second = Hashing.sha512().hashString((CharSequence)first, StandardCharsets.UTF_8).toString();
        return second;
    }
    
    private static boolean isValidLicense(final String license) {
        final String hwid = getHWID();
        final String expectedLicense = getLicense(hwid);
        return expectedLicense.equalsIgnoreCase(license);
    }
    
    private static void checkDRM() {
        if (!isValidLicense(Backdoored.providedLicense)) {
            FMLLog.log.info("Invalid License detected");
            FMLLog.log.info("Provided License: " + Backdoored.providedLicense);
            FMLLog.log.info("HWID: " + getHWID());
            DrmManager.hasCrashed = true;
            throw new NoStackTraceThrowable("Invalid License");
        }
    }
}
