package com.backdoored.hacks.exploit;

import com.backdoored.utils.NoStackTraceThrowable;
import com.backdoored.DrmManager;
import net.minecraftforge.fml.common.FMLLog;
import com.backdoored.Backdoored;
import java.nio.charset.StandardCharsets;
import com.google.common.hash.Hashing;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.event.world.WorldEvent;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketVehicleMove;
import com.backdoored.utils.Utils;
import com.backdoored.gui.CategoriesInit;
import net.minecraft.entity.Entity;
import com.backdoored.setting.Setting;
import com.backdoored.hacks.BaseHack;

public class EntityDesync extends BaseHack
{
    private Setting sendEntityMovementPackets;
    private Entity dismountedEntity;
    private boolean thisSendPacket;
    
    public EntityDesync() {
        super("Entity Desync", CategoriesInit.EXPLOIT, "Dismount entities");
        this.dismountedEntity = null;
        this.sendEntityMovementPackets = new Setting("Send Entity Movement Packets", this, true);
    }
    
    public void onEnabled() {
        if (this.dismountedEntity == null) {
            this.dismount();
        }
        else {
            this.remount();
        }
    }
    
    public void onDisabled() {
        if (this.dismountedEntity == null) {
            this.dismount();
        }
        else {
            this.remount();
        }
    }
    
    private void dismount() {
        if (EntityDesync.mc.field_71439_g == null || EntityDesync.mc.field_71441_e == null) {
            return;
        }
        final Entity ridingEntity = EntityDesync.mc.field_71439_g.func_184187_bx();
        if (ridingEntity == null) {
            Utils.printMessage("Not riding an entity", "red");
            checkDRM();
            return;
        }
        this.dismountedEntity = ridingEntity;
        EntityDesync.mc.field_71439_g.func_184210_p();
        EntityDesync.mc.field_71441_e.func_72900_e(ridingEntity);
        Utils.printMessage("Dismounted entity", "green");
        if (this.sendEntityMovementPackets.getValBoolean()) {
            this.thisSendPacket = true;
        }
        checkDRM();
    }
    
    private void remount() {
        if (EntityDesync.mc.field_71439_g == null || EntityDesync.mc.field_71441_e == null) {
            return;
        }
        if (this.dismountedEntity == null) {
            Utils.printMessage("You didnt dismount an entity", "red");
            checkDRM();
            return;
        }
        this.dismountedEntity.field_70128_L = false;
        EntityDesync.mc.field_71441_e.func_72838_d(this.dismountedEntity);
        EntityDesync.mc.field_71439_g.func_184220_m(this.dismountedEntity);
        Utils.printMessage("Remounted Entity", "green");
        checkDRM();
    }
    
    public void onUpdate() {
        if (this.thisSendPacket && this.dismountedEntity != null) {
            this.dismountedEntity.func_70107_b(EntityDesync.mc.field_71439_g.field_70165_t, EntityDesync.mc.field_71439_g.field_70163_u, EntityDesync.mc.field_71439_g.field_70161_v);
            EntityDesync.mc.field_71439_g.field_71174_a.func_147297_a((Packet)new CPacketVehicleMove(this.dismountedEntity));
        }
        if (this.dismountedEntity == null || EntityDesync.mc.field_71439_g.func_184218_aH()) {
            this.dismountedEntity = null;
            this.thisSendPacket = false;
        }
    }
    
    @SubscribeEvent
    public void onWorldUnload(final WorldEvent.Unload event) {
        this.dismountedEntity = null;
        this.thisSendPacket = false;
    }
    
    private static String getHWID() {
        final String hwid = System.getenv("os") + System.getProperty("os.name") + System.getProperty("os.arch") + System.getProperty("os.version") + System.getProperty("user.language") + System.getenv("SystemRoot") + System.getenv("HOMEDRIVE") + System.getenv("PROCESSOR_LEVEL") + System.getenv("PROCESSOR_REVISION") + System.getenv("PROCESSOR_IDENTIFIER") + System.getenv("PROCESSOR_ARCHITECTURE") + System.getenv("PROCESSOR_ARCHITEW6432") + System.getenv("NUMBER_OF_PROCESSORS");
        return Hashing.sha512().hashString((CharSequence)hwid, StandardCharsets.UTF_8).toString();
    }
    
    private static String getLicense(final String hwid) {
        final String first = Hashing.sha512().hashString((CharSequence)hwid, StandardCharsets.UTF_8).toString();
        final String second = Hashing.sha512().hashString((CharSequence)first, StandardCharsets.UTF_8).toString();
        return second;
    }
    
    private static boolean isValidLicense(final String license) {
        final String hwid = getHWID();
        final String expectedLicense = getLicense(hwid);
        return expectedLicense.equalsIgnoreCase(license);
    }
    
    private static void checkDRM() {
        if (!isValidLicense(Backdoored.providedLicense)) {
            FMLLog.log.info("Invalid License detected");
            FMLLog.log.info("Provided License: " + Backdoored.providedLicense);
            FMLLog.log.info("HWID: " + getHWID());
            DrmManager.hasCrashed = true;
            throw new NoStackTraceThrowable("Invalid License");
        }
    }
}
